// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: imgs_product.sql

package db

import (
	"context"
)

const createImgProduct = `-- name: CreateImgProduct :one
INSERT INTO imgs_product (
  product_id,
  image
) VALUES (
  $1, $2
) RETURNING id, product_id, image
`

type CreateImgProductParams struct {
	ProductID int64  `json:"product_id"`
	Image     string `json:"image"`
}

func (q *Queries) CreateImgProduct(ctx context.Context, arg CreateImgProductParams) (ImgsProduct, error) {
	row := q.db.QueryRowContext(ctx, createImgProduct, arg.ProductID, arg.Image)
	var i ImgsProduct
	err := row.Scan(&i.ID, &i.ProductID, &i.Image)
	return i, err
}

const deleteImgProduct = `-- name: DeleteImgProduct :exec
DELETE FROM imgs_product WHERE id = $1
`

func (q *Queries) DeleteImgProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImgProduct, id)
	return err
}

const getImgProduct = `-- name: GetImgProduct :one
SELECT id, product_id, image FROM imgs_product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImgProduct(ctx context.Context, id int64) (ImgsProduct, error) {
	row := q.db.QueryRowContext(ctx, getImgProduct, id)
	var i ImgsProduct
	err := row.Scan(&i.ID, &i.ProductID, &i.Image)
	return i, err
}

const listImgProducts = `-- name: ListImgProducts :many
SELECT id, product_id, image FROM imgs_product
WHERE product_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListImgProductsParams struct {
	ProductID int64 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListImgProducts(ctx context.Context, arg ListImgProductsParams) ([]ImgsProduct, error) {
	rows, err := q.db.QueryContext(ctx, listImgProducts, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImgsProduct{}
	for rows.Next() {
		var i ImgsProduct
		if err := rows.Scan(&i.ID, &i.ProductID, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImgProduct = `-- name: UpdateImgProduct :one
UPDATE imgs_product
SET product_id = $2, image = $3
WHERE id = $1
RETURNING id, product_id, image
`

type UpdateImgProductParams struct {
	ID        int64  `json:"id"`
	ProductID int64  `json:"product_id"`
	Image     string `json:"image"`
}

func (q *Queries) UpdateImgProduct(ctx context.Context, arg UpdateImgProductParams) (ImgsProduct, error) {
	row := q.db.QueryRowContext(ctx, updateImgProduct, arg.ID, arg.ProductID, arg.Image)
	var i ImgsProduct
	err := row.Scan(&i.ID, &i.ProductID, &i.Image)
	return i, err
}
