// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: descriptions_product.sql

package db

import (
	"context"
)

const createDescriptionProduct = `-- name: CreateDescriptionProduct :one
INSERT INTO descriptions_product (
  product_id,
  gender,
  material,
  size,
  size_of_model
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, product_id, gender, material, size, size_of_model
`

type CreateDescriptionProductParams struct {
	ProductID   int64  `json:"product_id"`
	Gender      string `json:"gender"`
	Material    string `json:"material"`
	Size        string `json:"size"`
	SizeOfModel string `json:"size_of_model"`
}

func (q *Queries) CreateDescriptionProduct(ctx context.Context, arg CreateDescriptionProductParams) (DescriptionsProduct, error) {
	row := q.db.QueryRowContext(ctx, createDescriptionProduct,
		arg.ProductID,
		arg.Gender,
		arg.Material,
		arg.Size,
		arg.SizeOfModel,
	)
	var i DescriptionsProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Gender,
		&i.Material,
		&i.Size,
		&i.SizeOfModel,
	)
	return i, err
}

const deleteDescriptionProduct = `-- name: DeleteDescriptionProduct :exec
DELETE FROM descriptions_product WHERE product_id = $1
`

func (q *Queries) DeleteDescriptionProduct(ctx context.Context, productID int64) error {
	_, err := q.db.ExecContext(ctx, deleteDescriptionProduct, productID)
	return err
}

const getDescriptionProductByID = `-- name: GetDescriptionProductByID :one
SELECT id, product_id, gender, material, size, size_of_model FROM descriptions_product
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetDescriptionProductByID(ctx context.Context, productID int64) (DescriptionsProduct, error) {
	row := q.db.QueryRowContext(ctx, getDescriptionProductByID, productID)
	var i DescriptionsProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Gender,
		&i.Material,
		&i.Size,
		&i.SizeOfModel,
	)
	return i, err
}

const listDescriptionProduct = `-- name: ListDescriptionProduct :many
SELECT id, product_id, gender, material, size, size_of_model FROM descriptions_product
ORDER BY product_id
LIMIT $1
OFFSET $2
`

type ListDescriptionProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDescriptionProduct(ctx context.Context, arg ListDescriptionProductParams) ([]DescriptionsProduct, error) {
	rows, err := q.db.QueryContext(ctx, listDescriptionProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DescriptionsProduct{}
	for rows.Next() {
		var i DescriptionsProduct
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Gender,
			&i.Material,
			&i.Size,
			&i.SizeOfModel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDescriptionProduct = `-- name: UpdateDescriptionProduct :one
UPDATE descriptions_product
SET gender = $2, material = $3, size = $4, size_of_model = $5
WHERE product_id = $1
RETURNING id, product_id, gender, material, size, size_of_model
`

type UpdateDescriptionProductParams struct {
	ProductID   int64  `json:"product_id"`
	Gender      string `json:"gender"`
	Material    string `json:"material"`
	Size        string `json:"size"`
	SizeOfModel string `json:"size_of_model"`
}

func (q *Queries) UpdateDescriptionProduct(ctx context.Context, arg UpdateDescriptionProductParams) (DescriptionsProduct, error) {
	row := q.db.QueryRowContext(ctx, updateDescriptionProduct,
		arg.ProductID,
		arg.Gender,
		arg.Material,
		arg.Size,
		arg.SizeOfModel,
	)
	var i DescriptionsProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Gender,
		&i.Material,
		&i.Size,
		&i.SizeOfModel,
	)
	return i, err
}
