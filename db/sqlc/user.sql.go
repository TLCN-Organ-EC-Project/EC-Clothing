// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const changeUserPassword = `-- name: ChangeUserPassword :one
UPDATE users
SET hashed_password = $2, password_changed_at = $3
WHERE username = $1
RETURNING username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at
`

type ChangeUserPasswordParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeUserPassword, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  phone,
  address,
  province,
  role
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	Address        string `json:"address"`
	Province       int64  `json:"province"`
	Role           int64  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.Province,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const getUserByResetPassToken = `-- name: GetUserByResetPassToken :one
SELECT username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at FROM users
WHERE reset_password_token = $1 LIMIT 1
`

func (q *Queries) GetUserByResetPassToken(ctx context.Context, resetPasswordToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByResetPassToken, resetPasswordToken)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at FROM users
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.Province,
			&i.Role,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.ResetPasswordToken,
			&i.RspasswordTokenExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResetPasswordToken = `-- name: UpdateResetPasswordToken :one
UPDATE users
SET reset_password_token = $2, rspassword_token_expired_at = $3
WHERE username = $1
RETURNING username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at
`

type UpdateResetPasswordTokenParams struct {
	Username                 string    `json:"username"`
	ResetPasswordToken       string    `json:"reset_password_token"`
	RspasswordTokenExpiredAt time.Time `json:"rspassword_token_expired_at"`
}

func (q *Queries) UpdateResetPasswordToken(ctx context.Context, arg UpdateResetPasswordTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateResetPasswordToken, arg.Username, arg.ResetPasswordToken, arg.RspasswordTokenExpiredAt)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = $2, email = $3, phone = $4, address = $5, province = $6
WHERE username = $1
RETURNING username, hashed_password, full_name, email, phone, address, province, role, password_changed_at, created_at, reset_password_token, rspassword_token_expired_at
`

type UpdateUserParams struct {
	Username string `json:"username"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Address  string `json:"address"`
	Province int64  `json:"province"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.Province,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.Province,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.ResetPasswordToken,
		&i.RspasswordTokenExpiredAt,
	)
	return i, err
}
