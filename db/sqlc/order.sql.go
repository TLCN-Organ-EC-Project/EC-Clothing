// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  booking_id,
  user_booking,
  promotion_id,
  address,
  province,
  amount,
  tax
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING booking_id, user_booking, promotion_id, status, booking_date, address, province, tax, amount, payment_method
`

type CreateOrderParams struct {
	BookingID   string  `json:"booking_id"`
	UserBooking string  `json:"user_booking"`
	PromotionID string  `json:"promotion_id"`
	Address     string  `json:"address"`
	Province    int64   `json:"province"`
	Amount      float64 `json:"amount"`
	Tax         float64 `json:"tax"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.BookingID,
		arg.UserBooking,
		arg.PromotionID,
		arg.Address,
		arg.Province,
		arg.Amount,
		arg.Tax,
	)
	var i Order
	err := row.Scan(
		&i.BookingID,
		&i.UserBooking,
		&i.PromotionID,
		&i.Status,
		&i.BookingDate,
		&i.Address,
		&i.Province,
		&i.Tax,
		&i.Amount,
		&i.PaymentMethod,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE booking_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, bookingID string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, bookingID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT booking_id, user_booking, promotion_id, status, booking_date, address, province, tax, amount, payment_method FROM orders
WHERE booking_id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, bookingID string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, bookingID)
	var i Order
	err := row.Scan(
		&i.BookingID,
		&i.UserBooking,
		&i.PromotionID,
		&i.Status,
		&i.BookingDate,
		&i.Address,
		&i.Province,
		&i.Tax,
		&i.Amount,
		&i.PaymentMethod,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT booking_id, user_booking, promotion_id, status, booking_date, address, province, tax, amount, payment_method FROM orders
ORDER BY booking_date
LIMIT $1
OFFSET $2
`

type ListOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.BookingID,
			&i.UserBooking,
			&i.PromotionID,
			&i.Status,
			&i.BookingDate,
			&i.Address,
			&i.Province,
			&i.Tax,
			&i.Amount,
			&i.PaymentMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderByUser = `-- name: ListOrderByUser :many
SELECT booking_id, user_booking, promotion_id, status, booking_date, address, province, tax, amount, payment_method FROM orders
WHERE user_booking = $1
ORDER BY booking_id
LIMIT $2
OFFSET $3
`

type ListOrderByUserParams struct {
	UserBooking string `json:"user_booking"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListOrderByUser(ctx context.Context, arg ListOrderByUserParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrderByUser, arg.UserBooking, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.BookingID,
			&i.UserBooking,
			&i.PromotionID,
			&i.Status,
			&i.BookingDate,
			&i.Address,
			&i.Province,
			&i.Tax,
			&i.Amount,
			&i.PaymentMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAmountOfOrder = `-- name: UpdateAmountOfOrder :one
UPDATE orders
SET amount = $2
WHERE booking_id = $1
RETURNING booking_id, user_booking, promotion_id, status, booking_date, address, province, tax, amount, payment_method
`

type UpdateAmountOfOrderParams struct {
	BookingID string  `json:"booking_id"`
	Amount    float64 `json:"amount"`
}

func (q *Queries) UpdateAmountOfOrder(ctx context.Context, arg UpdateAmountOfOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateAmountOfOrder, arg.BookingID, arg.Amount)
	var i Order
	err := row.Scan(
		&i.BookingID,
		&i.UserBooking,
		&i.PromotionID,
		&i.Status,
		&i.BookingDate,
		&i.Address,
		&i.Province,
		&i.Tax,
		&i.Amount,
		&i.PaymentMethod,
	)
	return i, err
}
