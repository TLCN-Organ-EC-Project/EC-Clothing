// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: products_in_category.sql

package db

import (
	"context"
)

const createProductsInCategory = `-- name: CreateProductsInCategory :one
INSERT INTO products_in_category (
  product_id,
  category_id
) VALUES (
  $1, $2
) RETURNING id, category_id, product_id
`

type CreateProductsInCategoryParams struct {
	ProductID  int64 `json:"product_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) CreateProductsInCategory(ctx context.Context, arg CreateProductsInCategoryParams) (ProductsInCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductsInCategory, arg.ProductID, arg.CategoryID)
	var i ProductsInCategory
	err := row.Scan(&i.ID, &i.CategoryID, &i.ProductID)
	return i, err
}

const deleteProductsInCategory = `-- name: DeleteProductsInCategory :exec
DELETE FROM products_in_category WHERE id = $1
`

func (q *Queries) DeleteProductsInCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductsInCategory, id)
	return err
}

const getProductsInCategoryByID = `-- name: GetProductsInCategoryByID :one
SELECT id, category_id, product_id FROM products_in_category
WHERE category_id = $1 AND product_id = $2 LIMIT 1
`

type GetProductsInCategoryByIDParams struct {
	CategoryID int64 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
}

func (q *Queries) GetProductsInCategoryByID(ctx context.Context, arg GetProductsInCategoryByIDParams) (ProductsInCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductsInCategoryByID, arg.CategoryID, arg.ProductID)
	var i ProductsInCategory
	err := row.Scan(&i.ID, &i.CategoryID, &i.ProductID)
	return i, err
}

const listProductsInCategory = `-- name: ListProductsInCategory :many
SELECT id, category_id, product_id FROM products_in_category
WHERE category_id = $1
ORDER BY product_id
LIMIT $2
OFFSET $3
`

type ListProductsInCategoryParams struct {
	CategoryID int64 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListProductsInCategory(ctx context.Context, arg ListProductsInCategoryParams) ([]ProductsInCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductsInCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductsInCategory{}
	for rows.Next() {
		var i ProductsInCategory
		if err := rows.Scan(&i.ID, &i.CategoryID, &i.ProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductsInCategory = `-- name: UpdateProductsInCategory :one
UPDATE products_in_category
SET product_id = $2, category_id = $3
WHERE id = $1
RETURNING id, category_id, product_id
`

type UpdateProductsInCategoryParams struct {
	ID         int64 `json:"id"`
	ProductID  int64 `json:"product_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) UpdateProductsInCategory(ctx context.Context, arg UpdateProductsInCategoryParams) (ProductsInCategory, error) {
	row := q.db.QueryRowContext(ctx, updateProductsInCategory, arg.ID, arg.ProductID, arg.CategoryID)
	var i ProductsInCategory
	err := row.Scan(&i.ID, &i.CategoryID, &i.ProductID)
	return i, err
}
