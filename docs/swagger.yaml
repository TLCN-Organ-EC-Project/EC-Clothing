definitions:
  api.addImageProductRequest:
    properties:
      images:
        items:
          type: string
        type: array
    required:
    - images
    type: object
  api.addProductToStoreRequest:
    properties:
      quantity:
        items:
          type: integer
        minItems: 1
        type: array
      size:
        items:
          type: string
        type: array
    required:
    - quantity
    - size
    type: object
  api.checkPasswordRequest:
    properties:
      password:
        minLength: 6
        type: string
    required:
    - password
    type: object
  api.createCartRequest:
    properties:
      product_id:
        minimum: 1
        type: integer
      quantity:
        minimum: 1
        type: integer
      size:
        type: string
    required:
    - product_id
    - quantity
    - size
    type: object
  api.createCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  api.createFeedbackRequest:
    properties:
      commention:
        type: string
      rating:
        type: string
    required:
    - commention
    - rating
    type: object
  api.createOrderRequest:
    properties:
      address:
        type: string
      payment_method:
        type: string
      product_id:
        items:
          type: integer
        minItems: 1
        type: array
      promotion_id:
        type: string
      province:
        type: string
      quantity:
        items:
          type: integer
        minItems: 1
        type: array
      size:
        items:
          type: string
        type: array
    required:
    - address
    - payment_method
    - product_id
    - province
    - quantity
    - size
    type: object
  api.createProductInCategoryRequest:
    properties:
      product_id:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - product_id
    type: object
  api.createProductRequest:
    properties:
      gender:
        type: string
      material:
        type: string
      price:
        type: number
      product_name:
        type: string
      size:
        type: string
      size_of_model:
        type: string
      thumb:
        type: string
    required:
    - gender
    - material
    - price
    - product_name
    - size
    - thumb
    type: object
  api.createProductResponse:
    properties:
      gender:
        type: string
      material:
        type: string
      price:
        type: number
      product_name:
        type: string
      size:
        type: string
      size_of_model:
        type: string
      thumb:
        type: string
    type: object
  api.createPromotionRequest:
    properties:
      description:
        type: string
      discount_percent:
        type: number
      end_date:
        type: integer
      title:
        type: string
    required:
    - description
    - end_date
    - title
    type: object
  api.createUserRequest:
    properties:
      address:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      provider:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - address
    - email
    - full_name
    - password
    - phone
    - provider
    - role
    - username
    type: object
  api.forgotPasswordRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  api.getProductByIDResponse:
    properties:
      product:
        items:
          properties:
            descriptions_product:
              $ref: '#/definitions/db.DescriptionsProduct'
            images:
              items:
                $ref: '#/definitions/db.ImgsProduct'
              type: array
            list_of_feedbacks:
              $ref: '#/definitions/api.listFeedbackResponse'
            product:
              $ref: '#/definitions/db.Product'
            stores:
              items:
                $ref: '#/definitions/db.Store'
              type: array
          type: object
        type: array
    type: object
  api.listCartResponse:
    properties:
      carts:
        items:
          properties:
            cart:
              $ref: '#/definitions/db.Cart'
            product:
              $ref: '#/definitions/db.Product'
          type: object
        type: array
    type: object
  api.listFeedbackResponse:
    properties:
      feedbacks:
        items:
          properties:
            commentor:
              $ref: '#/definitions/api.userResponse'
            feedback:
              $ref: '#/definitions/db.Feedback'
          type: object
        type: array
    type: object
  api.loginUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.newPasswordRequest:
    properties:
      first_password:
        minLength: 6
        type: string
      original_password:
        minLength: 6
        type: string
      second_password:
        minLength: 6
        type: string
    required:
    - first_password
    - original_password
    - second_password
    type: object
  api.promotionResponse:
    properties:
      description:
        type: string
      discount_percent:
        type: number
      end_date:
        type: string
      id:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  api.resetPasswordRequest:
    properties:
      first_password:
        minLength: 6
        type: string
      otpcode:
        type: string
      second_password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - first_password
    - otpcode
    - second_password
    - username
    type: object
  api.updateCartRequest:
    properties:
      quantity:
        minimum: 1
        type: integer
      size:
        type: string
    required:
    - quantity
    - size
    type: object
  api.updateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  api.updateOrderRequest:
    properties:
      address:
        type: string
      product_id:
        items:
          type: integer
        minItems: 1
        type: array
      province:
        type: string
      quantity:
        items:
          type: integer
        minItems: 1
        type: array
      size:
        items:
          type: string
        type: array
    required:
    - address
    - product_id
    - province
    - quantity
    - size
    type: object
  api.updatePromotionRequest:
    properties:
      description:
        type: string
      discount_percent:
        type: number
      end_date:
        type: integer
    required:
    - description
    - discount_percent
    - end_date
    type: object
  api.updateUserRequest:
    properties:
      address:
        type: string
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  api.userResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      phone:
        type: string
      province:
        type: integer
      username:
        type: string
    type: object
  db.Cart:
    properties:
      id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      size:
        type: string
      username:
        type: string
    type: object
  db.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  db.CreateProductTxResults:
    properties:
      gender:
        type: string
      material:
        type: string
      price:
        type: number
      product_name:
        type: string
      size:
        type: string
      size_of_model:
        type: string
      thumb:
        type: string
    type: object
  db.DescriptionsProduct:
    properties:
      gender:
        type: string
      id:
        type: integer
      material:
        type: string
      product_id:
        type: integer
      size:
        type: string
      size_of_model:
        type: string
    type: object
  db.Feedback:
    properties:
      commention:
        type: string
      created_at:
        type: string
      id:
        type: integer
      product_commented:
        type: integer
      rating:
        type: string
      user_comment:
        type: string
    type: object
  db.ImgsProduct:
    properties:
      id:
        type: integer
      image:
        type: string
      product_id:
        type: integer
    type: object
  db.ItemsOrder:
    properties:
      booking_id:
        type: string
      id:
        type: integer
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      size:
        type: string
    type: object
  db.Order:
    properties:
      address:
        type: string
      amount:
        type: number
      booking_date:
        type: string
      booking_id:
        type: string
      payment_method:
        type: string
      promotion_id:
        type: string
      province:
        type: integer
      status:
        type: string
      tax:
        description: must be positive
        type: number
      user_booking:
        type: string
    type: object
  db.OrderTxResult:
    properties:
      order:
        $ref: '#/definitions/db.Order'
      product_ordered:
        items:
          $ref: '#/definitions/db.ItemsOrder'
        type: array
      user_order:
        $ref: '#/definitions/db.userResponse'
    type: object
  db.Product:
    properties:
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      thumb:
        type: string
    type: object
  db.ProductsInCategory:
    properties:
      category_id:
        type: integer
      id:
        type: integer
      product_id:
        type: integer
    type: object
  db.Promotion:
    properties:
      description:
        type: string
      discount_percent:
        type: number
      end_date:
        type: string
      id:
        type: integer
      start_date:
        type: string
      title:
        type: string
    type: object
  db.Province:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  db.StatisticsProductRow:
    properties:
      product_id:
        type: integer
      sold:
        type: integer
    type: object
  db.Store:
    properties:
      id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      size:
        type: string
    type: object
  db.UpdateOrderTxResult:
    properties:
      order:
        $ref: '#/definitions/db.Order'
      product_ordered:
        items:
          $ref: '#/definitions/db.ItemsOrder'
        type: array
      user_order:
        $ref: '#/definitions/db.userResponse'
    type: object
  db.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  title: Service API
  version: "1.0"
paths:
  /api/admin/categories:
    post:
      consumes:
      - application/json
      operationId: createCategory
      parameters:
      - description: createCategoryRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      - bearerAuth: []
      summary: Admin Create New Category
      tags:
      - Admin
  /api/admin/categories/{id}:
    delete:
      consumes:
      - application/json
      operationId: adminDeleteCategory
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Delete Category
      tags:
      - Admin
    put:
      consumes:
      - application/json
      operationId: updateCategory
      parameters:
      - description: updateCategoryRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updateCategoryRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      - bearerAuth: []
      summary: Admin Update Category
      tags:
      - Admin
  /api/admin/categories/{id}/products:
    post:
      consumes:
      - application/json
      operationId: adminCreateProductInCategory
      parameters:
      - description: createProductInCategoryRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createProductInCategoryRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ProductsInCategory'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Create Products In Category
      tags:
      - Admin
  /api/admin/categories/{id}/products/{product_id}:
    delete:
      consumes:
      - application/json
      operationId: adminDeleteProductInCategory
      parameters:
      - description: CategoryID
        in: path
        name: id
        required: true
        type: string
      - description: ProductID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Delete Products In Category
      tags:
      - Admin
  /api/admin/income/monthly:
    get:
      consumes:
      - application/json
      operationId: getTotalIncomeMonthly
      parameters:
      - in: query
        maximum: 12
        minimum: 1
        name: month
        required: true
        type: integer
      - in: query
        minimum: 2023
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: float
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get Income Monthly
      tags:
      - Revenue/Admin
  /api/admin/income/yearly:
    get:
      consumes:
      - application/json
      operationId: getTotalIncomeYearly
      parameters:
      - in: query
        minimum: 2023
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: float
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get Income Yearly
      tags:
      - Revenue/Admin
  /api/admin/orders:
    get:
      consumes:
      - application/json
      operationId: adminListOrder
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 10
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get List Order
      tags:
      - Admin
  /api/admin/orders/{booking_id}:
    get:
      consumes:
      - application/json
      operationId: adminGetOrderByBookingID
      parameters:
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Order'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get Order By Booking ID
      tags:
      - Admin
  /api/admin/orders/{booking_id}/confirm:
    put:
      consumes:
      - application/json
      operationId: confirmOrder
      parameters:
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Confirm Order
      tags:
      - Admin
  /api/admin/orders/{booking_id}/detail:
    get:
      consumes:
      - application/json
      operationId: adminGetDetailOrderByBookingID
      parameters:
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.OrderTxResult'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get Detail Order By Booking ID
      tags:
      - Admin
  /api/admin/orders/users/{username}:
    get:
      consumes:
      - application/json
      operationId: adminListOrderByUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 10
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get List Order By User
      tags:
      - Admin
  /api/admin/products:
    post:
      consumes:
      - application/json
      operationId: adminCreateProduct
      parameters:
      - description: createProductRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateProductTxResults'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Create Product
      tags:
      - Admin
  /api/admin/products/{id}:
    post:
      consumes:
      - application/json
      operationId: adminAddImageProduct
      parameters:
      - description: addImageProductRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.addImageProductRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.ImgsProduct'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Add Image of Product
      tags:
      - Admin
    put:
      consumes:
      - application/json
      operationId: adminUpdateProduct
      parameters:
      - description: createProductRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createProductRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.createProductResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Update Product
      tags:
      - Admin
  /api/admin/products/{id}/store:
    post:
      consumes:
      - application/json
      operationId: adminAddProductToStore
      parameters:
      - description: addProductToStoreRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.addProductToStoreRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Store'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Add Product To Store
      tags:
      - Admin
    put:
      consumes:
      - application/json
      operationId: adminUpdateProductToStore
      parameters:
      - description: addProductToStoreRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.addProductToStoreRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Store'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Update Product To Store
      tags:
      - Admin
  /api/admin/promotions:
    post:
      consumes:
      - application/json
      operationId: createPromotion
      parameters:
      - description: createPromotionRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createPromotionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.promotionResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Create Promotion
      tags:
      - Admin
  /api/admin/promotions/{id}:
    delete:
      consumes:
      - application/json
      operationId: deletePromotion
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Delete Promotion
      tags:
      - Admin
  /api/admin/promotions/{title}:
    put:
      consumes:
      - application/json
      operationId: updatePromotion
      parameters:
      - description: updatePromotionRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updatePromotionRequest'
      - description: Title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Promotion'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Update Promotion
      tags:
      - Admin
  /api/admin/statistics_product:
    get:
      consumes:
      - application/json
      operationId: getStatisticsProduct
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.StatisticsProductRow'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get Statistics Product
      tags:
      - Revenue/Admin
  /api/admin/users/:
    get:
      consumes:
      - application/json
      operationId: listUser
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 10
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.userResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Get List User
      tags:
      - Admin
  /api/admin/users/{username}:
    delete:
      consumes:
      - application/json
      operationId: deleteUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Delete User
      tags:
      - Admin
    get:
      consumes:
      - application/json
      operationId: adminGetUserByUsername
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Get User By Username
      tags:
      - Admin
    put:
      consumes:
      - application/json
      operationId: adminUpdateUser
      parameters:
      - description: updateUserRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Update User
      tags:
      - Admin
  /api/admin/users/{username}/feedbacks/{product_commented}/{id}:
    delete:
      consumes:
      - application/json
      operationId: adminDeleteFeedback
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: UserComment
        in: path
        name: username
        required: true
        type: string
      - description: ProductCommented
        in: path
        name: product_commented
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Admin Delete Feedback
      tags:
      - Admin
  /api/categories:
    get:
      consumes:
      - application/json
      operationId: listCategory
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/db.Category'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get List Category
      tags:
      - Started
  /api/categories/{id}:
    get:
      consumes:
      - application/json
      operationId: getCategory
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Category'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Category
      tags:
      - Started
  /api/categories/{id}/products:
    get:
      consumes:
      - application/json
      operationId: getProductsInCategory
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 5
        name: page_size
        required: true
        type: integer
      - description: CategoryID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Products In Category
      tags:
      - Started
  /api/forgotpassword:
    post:
      consumes:
      - application/json
      operationId: sendResetPasswordToken
      parameters:
      - description: forgotPasswordRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.forgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Send Reset Password Token
      tags:
      - Started
  /api/login:
    post:
      consumes:
      - application/json
      operationId: loginUser
      parameters:
      - description: loginUserRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login user
      tags:
      - Started
  /api/products:
    get:
      consumes:
      - application/json
      operationId: listProduct
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List Product
      tags:
      - Started
  /api/products/{id}:
    get:
      consumes:
      - application/json
      operationId: getProductByID
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 10
        name: page_size
        required: true
        type: integer
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.getProductByIDResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Product By ID
      tags:
      - Started
  /api/products/{id}/feedbacks:
    get:
      consumes:
      - application/json
      operationId: listFeedbackByID
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 10
        name: page_size
        required: true
        type: integer
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.listFeedbackResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get List Feedback About Product
      tags:
      - User
  /api/products/find:
    get:
      consumes:
      - application/json
      operationId: findProduct
      parameters:
      - in: query
        name: keyword
        required: true
        type: string
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Find Product
      tags:
      - Started
  /api/promotions:
    get:
      consumes:
      - application/json
      operationId: listPromotion
      parameters:
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 10
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Promotion'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get List Promotion
      tags:
      - User
  /api/promotions/{title}:
    get:
      consumes:
      - application/json
      operationId: getPromotionByTitle
      parameters:
      - description: Title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.promotionResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get Promotion By Title
      tags:
      - User
  /api/provinces:
    get:
      consumes:
      - application/json
      operationId: listProvinces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                type: string
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get List Provinces
      tags:
      - Started
  /api/provinces/{id}:
    get:
      consumes:
      - application/json
      operationId: getProvinceByID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Province'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Provinces By ID
      tags:
      - Started
  /api/register:
    post:
      consumes:
      - application/json
      operationId: createUser
      parameters:
      - description: createUserRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user
      tags:
      - Started
  /api/resetpassword:
    post:
      consumes:
      - application/json
      operationId: resetPassword
      parameters:
      - description: resetPasswordRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.resetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Reset Password
      tags:
      - Started
  /api/tokens/renew_access:
    post:
      operationId: renewAccessToken
      parameters:
      - description: X-Refresh-Token
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Renew Access Token
      tags:
      - Auth
  /api/users/{username}:
    get:
      consumes:
      - application/json
      operationId: getUserByUsername
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Get User By Username
      tags:
      - User
    put:
      consumes:
      - application/json
      operationId: updateUser
      parameters:
      - description: updateUserRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Update User
      tags:
      - User
  /api/users/{username}/carts:
    delete:
      consumes:
      - application/json
      operationId: deleteCartOfUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Delete Carts Of User
      tags:
      - User
    get:
      consumes:
      - application/json
      operationId: listCartOfUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 20
        minimum: 10
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.listCartResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get List Cart
      tags:
      - User
    post:
      consumes:
      - application/json
      operationId: createCart
      parameters:
      - description: createCartRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createCartRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Cart'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Add Cart
      tags:
      - User
  /api/users/{username}/carts/{cart_id}:
    delete:
      consumes:
      - application/json
      operationId: deleteCart
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: CartID
        in: path
        name: cart_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Delete Cart
      tags:
      - User
    put:
      consumes:
      - application/json
      operationId: updatCart
      parameters:
      - description: updateCartRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updateCartRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: CartID
        in: path
        name: cart_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Cart'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Update Cart
      tags:
      - User
  /api/users/{username}/change:
    post:
      consumes:
      - application/json
      operationId: changePassword
      parameters:
      - description: newPasswordRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.newPasswordRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Change Password
      tags:
      - User
  /api/users/{username}/check:
    post:
      consumes:
      - application/json
      operationId: checkPassword
      parameters:
      - description: checkPasswordRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.checkPasswordRequest'
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Check Password
      tags:
      - User
  /api/users/{username}/feedbacks/{product_commented}:
    post:
      consumes:
      - application/json
      operationId: createFeedback
      parameters:
      - description: createFeedbackRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createFeedbackRequest'
      - description: UserComment
        in: path
        name: username
        required: true
        type: string
      - description: ProductCommented
        in: path
        name: product_commented
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Feedback'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Create Feedback
      tags:
      - User
  /api/users/{username}/feedbacks/{product_commented}/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteFeedback
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: UserComment
        in: path
        name: username
        required: true
        type: string
      - description: ProductCommented
        in: path
        name: product_commented
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Delete Feedback
      tags:
      - User
    put:
      consumes:
      - application/json
      operationId: updateFeedback
      parameters:
      - description: createFeedbackRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createFeedbackRequest'
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: UserComment
        in: path
        name: username
        required: true
        type: string
      - description: ProductCommented
        in: path
        name: product_commented
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Feedback'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Update Feedback
      tags:
      - User
  /api/users/{username}/orders:
    get:
      consumes:
      - application/json
      operationId: listOrderByUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - in: query
        maximum: 10
        minimum: 5
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get List Order
      tags:
      - User
    post:
      consumes:
      - application/json
      operationId: createOrder
      parameters:
      - description: createOrderRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.createOrderRequest'
      - description: UserOrder
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.OrderTxResult'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Create Order
      tags:
      - User
  /api/users/{username}/orders/{booking_id}:
    get:
      consumes:
      - application/json
      operationId: getOrder
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Order'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get Order
      tags:
      - User
    put:
      consumes:
      - application/json
      operationId: updateOrder
      parameters:
      - description: updateOrderRequest data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.updateOrderRequest'
      - description: UserOrder
        in: path
        name: username
        required: true
        type: string
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UpdateOrderTxResult'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Update Order
      tags:
      - User
  /api/users/{username}/orders/{booking_id}/cancel:
    put:
      consumes:
      - application/json
      operationId: cancelOrder
      parameters:
      - description: UserBooking
        in: path
        name: username
        required: true
        type: string
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Cancel Order
      tags:
      - User
  /api/users/{username}/orders/{booking_id}/detail:
    get:
      consumes:
      - application/json
      operationId: getDetailOrderByBookingID
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: BookingID
        in: path
        name: booking_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.OrderTxResult'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: User Get Detail Order By Booking ID
      tags:
      - User
securityDefinitions:
  bearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
